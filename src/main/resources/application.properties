server.servlet.context-path=/southsystem-desafio-voto

# datasource
spring.datasource.url=jdbc:postgresql://ec2-34-233-105-94.compute-1.amazonaws.com:5432/d3j74skpdp450m
spring.datasource.username=zucvhiqxzurhsg
spring.datasource.password=0f85c04086436ae70867287d358302aa406a81ecccae40ec2c116224e092a553

# jpa
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update


# actuator
management.endpoint.health.show-details=always
#indica que health deve mostrar detalhes sempre
management.endpoints.web.exposure.include=*
#alem do health e do info ele sempre vai export todos endpoints disponiveis
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@
# puxa informacoes do projeto do pom.xml

# Common Kafka Properties
#auto.create.topics.enable=true

# Producer properties
#spring.kafka.producer.bootstrap-servers=127.0.0.1:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.group-id=group_id
#topic.name.producer=resultado-votos

# Consumer properties
#spring.kafka.consumer.bootstrap-servers=127.0.0.1:9092
#spring.kafka.consumer.group-id=group_id
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#topic.name.consumer=resultado-votos
